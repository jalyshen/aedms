package com.aedms.core.entities.source;

import com.aedms.core.entities.AedmsEntity;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;

import fr.lteconsulting.Mandatory;
import fr.lteconsulting.UseBuilderGenerator;
import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * The Entity to representing AirCraft flight record. The physical table is "AIRCRAFT_FLIGHT_RECORD"
 * 
 * @author jaly
 */
@Entity
@Table(name = "AIRCRAFT_FLIGHT_RECORD")
@BeanDefinition
public class AirCraftFlightRec extends AedmsEntity {

    private static final long serialVersionUID = 1L;
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    @PropertyDefinition
    private Long id;
    
    @Column(name = "TT")
    @PropertyDefinition
    private int tt;
    
    @Column(name = "TC")
    @PropertyDefinition
    private int tc;
    
    @Column(name = "TBO")
    @PropertyDefinition
    private int tbo;
    
    @Column(name = "CBO")
    @PropertyDefinition
    private int cbo;
    
    @Column(name = "TSO")
    @PropertyDefinition
    private int tso;
    
    @Column(name = "CSO")
    @PropertyDefinition
    private int cso;
    
    @Column(name = "TREM")
    @PropertyDefinition
    private int trem;
    
    @Column(name = "CREM")
    @PropertyDefinition
    private int crem;
    
    @Column(name = "TSLSV")
    @PropertyDefinition
    private int tslsv;
    
    @Column(name = "CSLSV")
    @Temporal(javax.persistence.TemporalType.DATE)
    @PropertyDefinition
    private Date cslsv;
    
    @Column(name = "EFFECT_DATE")
    @Temporal(javax.persistence.TemporalType.DATE)
    @PropertyDefinition
    private Date effectDate;
    
    @ManyToOne
    @JoinColumn(name = "AIRCRAFT_ID")
    @PropertyDefinition
    private AirCraft aircraft;

    /**Constructor block*/
    public AirCraftFlightRec(){
        
    }
    
    @UseBuilderGenerator
    public AirCraftFlightRec(@Mandatory int tt, @Mandatory int tc, @Mandatory int tbo, @Mandatory int cbo, int tso, int cso, int trem, int crem, int tslsv,
            Date cslsv, @Mandatory Date effectDate, @Mandatory AirCraft aircraft) {
        super();
        this.tt = tt;
        this.tc = tc;
        this.tbo = tbo;
        this.cbo = cbo;
        this.tso = tso;
        this.cso = cso;
        this.trem = trem;
        this.crem = crem;
        this.tslsv = tslsv;
        this.cslsv = cslsv;
        this.effectDate = effectDate;
        this.aircraft = aircraft;
    }
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code AirCraftFlightRec}.
     * @return the meta-bean, not null
     */
    public static AirCraftFlightRec.Meta meta() {
        return AirCraftFlightRec.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(AirCraftFlightRec.Meta.INSTANCE);
    }

    @Override
    public AirCraftFlightRec.Meta metaBean() {
        return AirCraftFlightRec.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<Long> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the tt.
     * @return the value of the property
     */
    public int getTt() {
        return tt;
    }

    /**
     * Sets the tt.
     * @param tt  the new value of the property
     */
    public void setTt(int tt) {
        this.tt = tt;
    }

    /**
     * Gets the the {@code tt} property.
     * @return the property, not null
     */
    public final Property<Integer> tt() {
        return metaBean().tt().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the tc.
     * @return the value of the property
     */
    public int getTc() {
        return tc;
    }

    /**
     * Sets the tc.
     * @param tc  the new value of the property
     */
    public void setTc(int tc) {
        this.tc = tc;
    }

    /**
     * Gets the the {@code tc} property.
     * @return the property, not null
     */
    public final Property<Integer> tc() {
        return metaBean().tc().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the tbo.
     * @return the value of the property
     */
    public int getTbo() {
        return tbo;
    }

    /**
     * Sets the tbo.
     * @param tbo  the new value of the property
     */
    public void setTbo(int tbo) {
        this.tbo = tbo;
    }

    /**
     * Gets the the {@code tbo} property.
     * @return the property, not null
     */
    public final Property<Integer> tbo() {
        return metaBean().tbo().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the cbo.
     * @return the value of the property
     */
    public int getCbo() {
        return cbo;
    }

    /**
     * Sets the cbo.
     * @param cbo  the new value of the property
     */
    public void setCbo(int cbo) {
        this.cbo = cbo;
    }

    /**
     * Gets the the {@code cbo} property.
     * @return the property, not null
     */
    public final Property<Integer> cbo() {
        return metaBean().cbo().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the tso.
     * @return the value of the property
     */
    public int getTso() {
        return tso;
    }

    /**
     * Sets the tso.
     * @param tso  the new value of the property
     */
    public void setTso(int tso) {
        this.tso = tso;
    }

    /**
     * Gets the the {@code tso} property.
     * @return the property, not null
     */
    public final Property<Integer> tso() {
        return metaBean().tso().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the cso.
     * @return the value of the property
     */
    public int getCso() {
        return cso;
    }

    /**
     * Sets the cso.
     * @param cso  the new value of the property
     */
    public void setCso(int cso) {
        this.cso = cso;
    }

    /**
     * Gets the the {@code cso} property.
     * @return the property, not null
     */
    public final Property<Integer> cso() {
        return metaBean().cso().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the trem.
     * @return the value of the property
     */
    public int getTrem() {
        return trem;
    }

    /**
     * Sets the trem.
     * @param trem  the new value of the property
     */
    public void setTrem(int trem) {
        this.trem = trem;
    }

    /**
     * Gets the the {@code trem} property.
     * @return the property, not null
     */
    public final Property<Integer> trem() {
        return metaBean().trem().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the crem.
     * @return the value of the property
     */
    public int getCrem() {
        return crem;
    }

    /**
     * Sets the crem.
     * @param crem  the new value of the property
     */
    public void setCrem(int crem) {
        this.crem = crem;
    }

    /**
     * Gets the the {@code crem} property.
     * @return the property, not null
     */
    public final Property<Integer> crem() {
        return metaBean().crem().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the tslsv.
     * @return the value of the property
     */
    public int getTslsv() {
        return tslsv;
    }

    /**
     * Sets the tslsv.
     * @param tslsv  the new value of the property
     */
    public void setTslsv(int tslsv) {
        this.tslsv = tslsv;
    }

    /**
     * Gets the the {@code tslsv} property.
     * @return the property, not null
     */
    public final Property<Integer> tslsv() {
        return metaBean().tslsv().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the cslsv.
     * @return the value of the property
     */
    public Date getCslsv() {
        return cslsv;
    }

    /**
     * Sets the cslsv.
     * @param cslsv  the new value of the property
     */
    public void setCslsv(Date cslsv) {
        this.cslsv = cslsv;
    }

    /**
     * Gets the the {@code cslsv} property.
     * @return the property, not null
     */
    public final Property<Date> cslsv() {
        return metaBean().cslsv().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the effectDate.
     * @return the value of the property
     */
    public Date getEffectDate() {
        return effectDate;
    }

    /**
     * Sets the effectDate.
     * @param effectDate  the new value of the property
     */
    public void setEffectDate(Date effectDate) {
        this.effectDate = effectDate;
    }

    /**
     * Gets the the {@code effectDate} property.
     * @return the property, not null
     */
    public final Property<Date> effectDate() {
        return metaBean().effectDate().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the aircraft.
     * @return the value of the property
     */
    public AirCraft getAircraft() {
        return aircraft;
    }

    /**
     * Sets the aircraft.
     * @param aircraft  the new value of the property
     */
    public void setAircraft(AirCraft aircraft) {
        this.aircraft = aircraft;
    }

    /**
     * Gets the the {@code aircraft} property.
     * @return the property, not null
     */
    public final Property<AirCraft> aircraft() {
        return metaBean().aircraft().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public AirCraftFlightRec clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            AirCraftFlightRec other = (AirCraftFlightRec) obj;
            return JodaBeanUtils.equal(getId(), other.getId()) &&
                    (getTt() == other.getTt()) &&
                    (getTc() == other.getTc()) &&
                    (getTbo() == other.getTbo()) &&
                    (getCbo() == other.getCbo()) &&
                    (getTso() == other.getTso()) &&
                    (getCso() == other.getCso()) &&
                    (getTrem() == other.getTrem()) &&
                    (getCrem() == other.getCrem()) &&
                    (getTslsv() == other.getTslsv()) &&
                    JodaBeanUtils.equal(getCslsv(), other.getCslsv()) &&
                    JodaBeanUtils.equal(getEffectDate(), other.getEffectDate()) &&
                    JodaBeanUtils.equal(getAircraft(), other.getAircraft()) &&
                    super.equals(obj);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = hash * 31 + JodaBeanUtils.hashCode(getId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTt());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTc());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTbo());
        hash = hash * 31 + JodaBeanUtils.hashCode(getCbo());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTso());
        hash = hash * 31 + JodaBeanUtils.hashCode(getCso());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTrem());
        hash = hash * 31 + JodaBeanUtils.hashCode(getCrem());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTslsv());
        hash = hash * 31 + JodaBeanUtils.hashCode(getCslsv());
        hash = hash * 31 + JodaBeanUtils.hashCode(getEffectDate());
        hash = hash * 31 + JodaBeanUtils.hashCode(getAircraft());
        return hash ^ super.hashCode();
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(448);
        buf.append("AirCraftFlightRec{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    @Override
    protected void toString(StringBuilder buf) {
        super.toString(buf);
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("tt").append('=').append(JodaBeanUtils.toString(getTt())).append(',').append(' ');
        buf.append("tc").append('=').append(JodaBeanUtils.toString(getTc())).append(',').append(' ');
        buf.append("tbo").append('=').append(JodaBeanUtils.toString(getTbo())).append(',').append(' ');
        buf.append("cbo").append('=').append(JodaBeanUtils.toString(getCbo())).append(',').append(' ');
        buf.append("tso").append('=').append(JodaBeanUtils.toString(getTso())).append(',').append(' ');
        buf.append("cso").append('=').append(JodaBeanUtils.toString(getCso())).append(',').append(' ');
        buf.append("trem").append('=').append(JodaBeanUtils.toString(getTrem())).append(',').append(' ');
        buf.append("crem").append('=').append(JodaBeanUtils.toString(getCrem())).append(',').append(' ');
        buf.append("tslsv").append('=').append(JodaBeanUtils.toString(getTslsv())).append(',').append(' ');
        buf.append("cslsv").append('=').append(JodaBeanUtils.toString(getCslsv())).append(',').append(' ');
        buf.append("effectDate").append('=').append(JodaBeanUtils.toString(getEffectDate())).append(',').append(' ');
        buf.append("aircraft").append('=').append(JodaBeanUtils.toString(getAircraft())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code AirCraftFlightRec}.
     */
    public static class Meta extends AedmsEntity.Meta {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<Long> id = DirectMetaProperty.ofReadWrite(
                this, "id", AirCraftFlightRec.class, Long.class);
        /**
         * The meta-property for the {@code tt} property.
         */
        private final MetaProperty<Integer> tt = DirectMetaProperty.ofReadWrite(
                this, "tt", AirCraftFlightRec.class, Integer.TYPE);
        /**
         * The meta-property for the {@code tc} property.
         */
        private final MetaProperty<Integer> tc = DirectMetaProperty.ofReadWrite(
                this, "tc", AirCraftFlightRec.class, Integer.TYPE);
        /**
         * The meta-property for the {@code tbo} property.
         */
        private final MetaProperty<Integer> tbo = DirectMetaProperty.ofReadWrite(
                this, "tbo", AirCraftFlightRec.class, Integer.TYPE);
        /**
         * The meta-property for the {@code cbo} property.
         */
        private final MetaProperty<Integer> cbo = DirectMetaProperty.ofReadWrite(
                this, "cbo", AirCraftFlightRec.class, Integer.TYPE);
        /**
         * The meta-property for the {@code tso} property.
         */
        private final MetaProperty<Integer> tso = DirectMetaProperty.ofReadWrite(
                this, "tso", AirCraftFlightRec.class, Integer.TYPE);
        /**
         * The meta-property for the {@code cso} property.
         */
        private final MetaProperty<Integer> cso = DirectMetaProperty.ofReadWrite(
                this, "cso", AirCraftFlightRec.class, Integer.TYPE);
        /**
         * The meta-property for the {@code trem} property.
         */
        private final MetaProperty<Integer> trem = DirectMetaProperty.ofReadWrite(
                this, "trem", AirCraftFlightRec.class, Integer.TYPE);
        /**
         * The meta-property for the {@code crem} property.
         */
        private final MetaProperty<Integer> crem = DirectMetaProperty.ofReadWrite(
                this, "crem", AirCraftFlightRec.class, Integer.TYPE);
        /**
         * The meta-property for the {@code tslsv} property.
         */
        private final MetaProperty<Integer> tslsv = DirectMetaProperty.ofReadWrite(
                this, "tslsv", AirCraftFlightRec.class, Integer.TYPE);
        /**
         * The meta-property for the {@code cslsv} property.
         */
        private final MetaProperty<Date> cslsv = DirectMetaProperty.ofReadWrite(
                this, "cslsv", AirCraftFlightRec.class, Date.class);
        /**
         * The meta-property for the {@code effectDate} property.
         */
        private final MetaProperty<Date> effectDate = DirectMetaProperty.ofReadWrite(
                this, "effectDate", AirCraftFlightRec.class, Date.class);
        /**
         * The meta-property for the {@code aircraft} property.
         */
        private final MetaProperty<AirCraft> aircraft = DirectMetaProperty.ofReadWrite(
                this, "aircraft", AirCraftFlightRec.class, AirCraft.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, (DirectMetaPropertyMap) super.metaPropertyMap(),
                "id",
                "tt",
                "tc",
                "tbo",
                "cbo",
                "tso",
                "cso",
                "trem",
                "crem",
                "tslsv",
                "cslsv",
                "effectDate",
                "aircraft");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case 3712:  // tt
                    return tt;
                case 3695:  // tc
                    return tc;
                case 114625:  // tbo
                    return tbo;
                case 98288:  // cbo
                    return cbo;
                case 115152:  // tso
                    return tso;
                case 98815:  // cso
                    return cso;
                case 3568550:  // trem
                    return trem;
                case 3062103:  // crem
                    return crem;
                case 110661872:  // tslsv
                    return tslsv;
                case 94962015:  // cslsv
                    return cslsv;
                case 1715334367:  // effectDate
                    return effectDate;
                case -688838890:  // aircraft
                    return aircraft;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends AirCraftFlightRec> builder() {
            return new DirectBeanBuilder<AirCraftFlightRec>(new AirCraftFlightRec());
        }

        @Override
        public Class<? extends AirCraftFlightRec> beanType() {
            return AirCraftFlightRec.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> id() {
            return id;
        }

        /**
         * The meta-property for the {@code tt} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> tt() {
            return tt;
        }

        /**
         * The meta-property for the {@code tc} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> tc() {
            return tc;
        }

        /**
         * The meta-property for the {@code tbo} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> tbo() {
            return tbo;
        }

        /**
         * The meta-property for the {@code cbo} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> cbo() {
            return cbo;
        }

        /**
         * The meta-property for the {@code tso} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> tso() {
            return tso;
        }

        /**
         * The meta-property for the {@code cso} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> cso() {
            return cso;
        }

        /**
         * The meta-property for the {@code trem} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> trem() {
            return trem;
        }

        /**
         * The meta-property for the {@code crem} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> crem() {
            return crem;
        }

        /**
         * The meta-property for the {@code tslsv} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> tslsv() {
            return tslsv;
        }

        /**
         * The meta-property for the {@code cslsv} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Date> cslsv() {
            return cslsv;
        }

        /**
         * The meta-property for the {@code effectDate} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Date> effectDate() {
            return effectDate;
        }

        /**
         * The meta-property for the {@code aircraft} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<AirCraft> aircraft() {
            return aircraft;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((AirCraftFlightRec) bean).getId();
                case 3712:  // tt
                    return ((AirCraftFlightRec) bean).getTt();
                case 3695:  // tc
                    return ((AirCraftFlightRec) bean).getTc();
                case 114625:  // tbo
                    return ((AirCraftFlightRec) bean).getTbo();
                case 98288:  // cbo
                    return ((AirCraftFlightRec) bean).getCbo();
                case 115152:  // tso
                    return ((AirCraftFlightRec) bean).getTso();
                case 98815:  // cso
                    return ((AirCraftFlightRec) bean).getCso();
                case 3568550:  // trem
                    return ((AirCraftFlightRec) bean).getTrem();
                case 3062103:  // crem
                    return ((AirCraftFlightRec) bean).getCrem();
                case 110661872:  // tslsv
                    return ((AirCraftFlightRec) bean).getTslsv();
                case 94962015:  // cslsv
                    return ((AirCraftFlightRec) bean).getCslsv();
                case 1715334367:  // effectDate
                    return ((AirCraftFlightRec) bean).getEffectDate();
                case -688838890:  // aircraft
                    return ((AirCraftFlightRec) bean).getAircraft();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((AirCraftFlightRec) bean).setId((Long) newValue);
                    return;
                case 3712:  // tt
                    ((AirCraftFlightRec) bean).setTt((Integer) newValue);
                    return;
                case 3695:  // tc
                    ((AirCraftFlightRec) bean).setTc((Integer) newValue);
                    return;
                case 114625:  // tbo
                    ((AirCraftFlightRec) bean).setTbo((Integer) newValue);
                    return;
                case 98288:  // cbo
                    ((AirCraftFlightRec) bean).setCbo((Integer) newValue);
                    return;
                case 115152:  // tso
                    ((AirCraftFlightRec) bean).setTso((Integer) newValue);
                    return;
                case 98815:  // cso
                    ((AirCraftFlightRec) bean).setCso((Integer) newValue);
                    return;
                case 3568550:  // trem
                    ((AirCraftFlightRec) bean).setTrem((Integer) newValue);
                    return;
                case 3062103:  // crem
                    ((AirCraftFlightRec) bean).setCrem((Integer) newValue);
                    return;
                case 110661872:  // tslsv
                    ((AirCraftFlightRec) bean).setTslsv((Integer) newValue);
                    return;
                case 94962015:  // cslsv
                    ((AirCraftFlightRec) bean).setCslsv((Date) newValue);
                    return;
                case 1715334367:  // effectDate
                    ((AirCraftFlightRec) bean).setEffectDate((Date) newValue);
                    return;
                case -688838890:  // aircraft
                    ((AirCraftFlightRec) bean).setAircraft((AirCraft) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

package com.aedms.core.entities.source;

import com.aedms.core.entities.AedmsEntity;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;

import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;

import fr.lteconsulting.Mandatory;
import fr.lteconsulting.UseBuilderGenerator;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 *
 * The Entity to representing User record. The physical table is "USER"
 * TODO: make this as a Joda-Bean
 * @author jaly
 */
@Entity
@Table(name = "USER")
@BeanDefinition
public class User extends AedmsEntity {
    
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    @PropertyDefinition
    private Long id;

    @Column(name = "NAME")
    @PropertyDefinition
    private String name;
    
    @Column(name = "LOGIN_NAME")
    @PropertyDefinition
    private String loginName;
    
    @Column(name = "PASSWORD")
    @PropertyDefinition
    private String password;
    
    @ManyToOne
    @JoinColumn(name = "ORGANIZATION_ID")
    @PropertyDefinition
    private Organization organization;
    
    @Column(name = "FIRST_LOGIN")
    @Temporal(javax.persistence.TemporalType.DATE)
    @PropertyDefinition
    private Date firstLogin;
    
    @Column(name = "LAST_LOGIN")
    @Temporal(javax.persistence.TemporalType.DATE)
    @PropertyDefinition
    private Date lastLogin;
    
    @Column(name = "EMAIL")
    @PropertyDefinition
    private String email;
    
    /** Constructors list block */
    public User(){}
    
    @UseBuilderGenerator
    public User(@Mandatory String name, @Mandatory String loginName, @Mandatory String passsword, @Mandatory Organization organization,  Date firstLogin,
            Date lastLogin, String email) {
        super();
        this.name = name;
        this.loginName = loginName;
        this.password = passsword;
        this.organization = organization;
        this.firstLogin = firstLogin;
        this.lastLogin = lastLogin;
        this.email = email; 
    }

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code User}.
     * @return the meta-bean, not null
     */
    public static User.Meta meta() {
        return User.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(User.Meta.INSTANCE);
    }

    @Override
    public User.Meta metaBean() {
        return User.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<Long> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the name.
     * @return the value of the property
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name.
     * @param name  the new value of the property
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the the {@code name} property.
     * @return the property, not null
     */
    public final Property<String> name() {
        return metaBean().name().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the loginName.
     * @return the value of the property
     */
    public String getLoginName() {
        return loginName;
    }

    /**
     * Sets the loginName.
     * @param loginName  the new value of the property
     */
    public void setLoginName(String loginName) {
        this.loginName = loginName;
    }

    /**
     * Gets the the {@code loginName} property.
     * @return the property, not null
     */
    public final Property<String> loginName() {
        return metaBean().loginName().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the password.
     * @return the value of the property
     */
    public String getPassword() {
        return password;
    }

    /**
     * Sets the password.
     * @param password  the new value of the property
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Gets the the {@code password} property.
     * @return the property, not null
     */
    public final Property<String> password() {
        return metaBean().password().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the organization.
     * @return the value of the property
     */
    public Organization getOrganization() {
        return organization;
    }

    /**
     * Sets the organization.
     * @param organization  the new value of the property
     */
    public void setOrganization(Organization organization) {
        this.organization = organization;
    }

    /**
     * Gets the the {@code organization} property.
     * @return the property, not null
     */
    public final Property<Organization> organization() {
        return metaBean().organization().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the firstLogin.
     * @return the value of the property
     */
    public Date getFirstLogin() {
        return firstLogin;
    }

    /**
     * Sets the firstLogin.
     * @param firstLogin  the new value of the property
     */
    public void setFirstLogin(Date firstLogin) {
        this.firstLogin = firstLogin;
    }

    /**
     * Gets the the {@code firstLogin} property.
     * @return the property, not null
     */
    public final Property<Date> firstLogin() {
        return metaBean().firstLogin().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the lastLogin.
     * @return the value of the property
     */
    public Date getLastLogin() {
        return lastLogin;
    }

    /**
     * Sets the lastLogin.
     * @param lastLogin  the new value of the property
     */
    public void setLastLogin(Date lastLogin) {
        this.lastLogin = lastLogin;
    }

    /**
     * Gets the the {@code lastLogin} property.
     * @return the property, not null
     */
    public final Property<Date> lastLogin() {
        return metaBean().lastLogin().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the email.
     * @return the value of the property
     */
    public String getEmail() {
        return email;
    }

    /**
     * Sets the email.
     * @param email  the new value of the property
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Gets the the {@code email} property.
     * @return the property, not null
     */
    public final Property<String> email() {
        return metaBean().email().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public User clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            User other = (User) obj;
            return JodaBeanUtils.equal(getId(), other.getId()) &&
                    JodaBeanUtils.equal(getName(), other.getName()) &&
                    JodaBeanUtils.equal(getLoginName(), other.getLoginName()) &&
                    JodaBeanUtils.equal(getPassword(), other.getPassword()) &&
                    JodaBeanUtils.equal(getOrganization(), other.getOrganization()) &&
                    JodaBeanUtils.equal(getFirstLogin(), other.getFirstLogin()) &&
                    JodaBeanUtils.equal(getLastLogin(), other.getLastLogin()) &&
                    JodaBeanUtils.equal(getEmail(), other.getEmail()) &&
                    super.equals(obj);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = hash * 31 + JodaBeanUtils.hashCode(getId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getName());
        hash = hash * 31 + JodaBeanUtils.hashCode(getLoginName());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPassword());
        hash = hash * 31 + JodaBeanUtils.hashCode(getOrganization());
        hash = hash * 31 + JodaBeanUtils.hashCode(getFirstLogin());
        hash = hash * 31 + JodaBeanUtils.hashCode(getLastLogin());
        hash = hash * 31 + JodaBeanUtils.hashCode(getEmail());
        return hash ^ super.hashCode();
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(288);
        buf.append("User{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    @Override
    protected void toString(StringBuilder buf) {
        super.toString(buf);
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("name").append('=').append(JodaBeanUtils.toString(getName())).append(',').append(' ');
        buf.append("loginName").append('=').append(JodaBeanUtils.toString(getLoginName())).append(',').append(' ');
        buf.append("password").append('=').append(JodaBeanUtils.toString(getPassword())).append(',').append(' ');
        buf.append("organization").append('=').append(JodaBeanUtils.toString(getOrganization())).append(',').append(' ');
        buf.append("firstLogin").append('=').append(JodaBeanUtils.toString(getFirstLogin())).append(',').append(' ');
        buf.append("lastLogin").append('=').append(JodaBeanUtils.toString(getLastLogin())).append(',').append(' ');
        buf.append("email").append('=').append(JodaBeanUtils.toString(getEmail())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code User}.
     */
    public static class Meta extends AedmsEntity.Meta {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<Long> id = DirectMetaProperty.ofReadWrite(
                this, "id", User.class, Long.class);
        /**
         * The meta-property for the {@code name} property.
         */
        private final MetaProperty<String> name = DirectMetaProperty.ofReadWrite(
                this, "name", User.class, String.class);
        /**
         * The meta-property for the {@code loginName} property.
         */
        private final MetaProperty<String> loginName = DirectMetaProperty.ofReadWrite(
                this, "loginName", User.class, String.class);
        /**
         * The meta-property for the {@code password} property.
         */
        private final MetaProperty<String> password = DirectMetaProperty.ofReadWrite(
                this, "password", User.class, String.class);
        /**
         * The meta-property for the {@code organization} property.
         */
        private final MetaProperty<Organization> organization = DirectMetaProperty.ofReadWrite(
                this, "organization", User.class, Organization.class);
        /**
         * The meta-property for the {@code firstLogin} property.
         */
        private final MetaProperty<Date> firstLogin = DirectMetaProperty.ofReadWrite(
                this, "firstLogin", User.class, Date.class);
        /**
         * The meta-property for the {@code lastLogin} property.
         */
        private final MetaProperty<Date> lastLogin = DirectMetaProperty.ofReadWrite(
                this, "lastLogin", User.class, Date.class);
        /**
         * The meta-property for the {@code email} property.
         */
        private final MetaProperty<String> email = DirectMetaProperty.ofReadWrite(
                this, "email", User.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, (DirectMetaPropertyMap) super.metaPropertyMap(),
                "id",
                "name",
                "loginName",
                "password",
                "organization",
                "firstLogin",
                "lastLogin",
                "email");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case 3373707:  // name
                    return name;
                case -1719467628:  // loginName
                    return loginName;
                case 1216985755:  // password
                    return password;
                case 1178922291:  // organization
                    return organization;
                case -178496871:  // firstLogin
                    return firstLogin;
                case 1995610739:  // lastLogin
                    return lastLogin;
                case 96619420:  // email
                    return email;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends User> builder() {
            return new DirectBeanBuilder<User>(new User());
        }

        @Override
        public Class<? extends User> beanType() {
            return User.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> id() {
            return id;
        }

        /**
         * The meta-property for the {@code name} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> name() {
            return name;
        }

        /**
         * The meta-property for the {@code loginName} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> loginName() {
            return loginName;
        }

        /**
         * The meta-property for the {@code password} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> password() {
            return password;
        }

        /**
         * The meta-property for the {@code organization} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Organization> organization() {
            return organization;
        }

        /**
         * The meta-property for the {@code firstLogin} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Date> firstLogin() {
            return firstLogin;
        }

        /**
         * The meta-property for the {@code lastLogin} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Date> lastLogin() {
            return lastLogin;
        }

        /**
         * The meta-property for the {@code email} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> email() {
            return email;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((User) bean).getId();
                case 3373707:  // name
                    return ((User) bean).getName();
                case -1719467628:  // loginName
                    return ((User) bean).getLoginName();
                case 1216985755:  // password
                    return ((User) bean).getPassword();
                case 1178922291:  // organization
                    return ((User) bean).getOrganization();
                case -178496871:  // firstLogin
                    return ((User) bean).getFirstLogin();
                case 1995610739:  // lastLogin
                    return ((User) bean).getLastLogin();
                case 96619420:  // email
                    return ((User) bean).getEmail();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((User) bean).setId((Long) newValue);
                    return;
                case 3373707:  // name
                    ((User) bean).setName((String) newValue);
                    return;
                case -1719467628:  // loginName
                    ((User) bean).setLoginName((String) newValue);
                    return;
                case 1216985755:  // password
                    ((User) bean).setPassword((String) newValue);
                    return;
                case 1178922291:  // organization
                    ((User) bean).setOrganization((Organization) newValue);
                    return;
                case -178496871:  // firstLogin
                    ((User) bean).setFirstLogin((Date) newValue);
                    return;
                case 1995610739:  // lastLogin
                    ((User) bean).setLastLogin((Date) newValue);
                    return;
                case 96619420:  // email
                    ((User) bean).setEmail((String) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

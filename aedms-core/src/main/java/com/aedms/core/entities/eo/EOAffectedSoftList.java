package com.aedms.core.entities.eo;

import com.aedms.core.entities.AedmsEntity;
import fr.lteconsulting.UseBuilderGenerator;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import org.joda.beans.BeanDefinition;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;


@Entity
@Table (name = "EO_AFF_SOFT_LIST")
@BeanDefinition
public class EOAffectedSoftList extends AedmsEntity {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    @PropertyDefinition
    private long id;

    @Column(name = "SFT_NO", length = 50)
    @PropertyDefinition
    private String softNumber;

    @Column(name = "SFT_DESC", length = 4000)
    @PropertyDefinition
    private String softDescription;

    @Column(name = "SFT_REV_NO", length = 50)
    @PropertyDefinition
    private String softVersionNumber;

    @Column(name = "SFT_NAME", length = 100)
    @PropertyDefinition
    private String softName;

    @Column(name = "SFT_ATA", length = 10)
    @PropertyDefinition
    private String softATA;

    @Column(name = "SFT_UPDATE_DATE")
    @Temporal(javax.persistence.TemporalType.DATE)
    @PropertyDefinition
    private Date softUpdateDate;

    @ManyToOne
    @JoinColumn(name="EORDER_ID", nullable=false)
    @PropertyDefinition
    private EOOrder eoOrder;

    public EOAffectedSoftList() {
    }
    
    /**
     * 
     * @param softNumber
     * @param softDescription
     * @param softVersionNumber
     * @param softName
     * @param softATA
     * @param softUpdateDate
     * @param eoOrder 
     
    @UseBuilderGenerator
    public EOAffectedSoftList(String softNumber, String softDescription, 
            String softVersionNumber, String softName,
            String softATA, Date softUpdateDate, EOOrder eoOrder) {
        this.softNumber = softNumber;
        this.softDescription = softDescription;
        this.softVersionNumber = softVersionNumber;
        this.softName = softName;
        this.softATA = softATA;
        this.softUpdateDate = softUpdateDate;
        this.eoOrder = eoOrder;
    }

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code EOAffectedSoftList}.
     * @return the meta-bean, not null
     */
    public static EOAffectedSoftList.Meta meta() {
        return EOAffectedSoftList.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(EOAffectedSoftList.Meta.INSTANCE);
    }

    @Override
    public EOAffectedSoftList.Meta metaBean() {
        return EOAffectedSoftList.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public long getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<Long> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the softNumber.
     * @return the value of the property
     */
    public String getSoftNumber() {
        return softNumber;
    }

    /**
     * Sets the softNumber.
     * @param softNumber  the new value of the property
     */
    public void setSoftNumber(String softNumber) {
        this.softNumber = softNumber;
    }

    /**
     * Gets the the {@code softNumber} property.
     * @return the property, not null
     */
    public final Property<String> softNumber() {
        return metaBean().softNumber().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the softDescription.
     * @return the value of the property
     */
    public String getSoftDescription() {
        return softDescription;
    }

    /**
     * Sets the softDescription.
     * @param softDescription  the new value of the property
     */
    public void setSoftDescription(String softDescription) {
        this.softDescription = softDescription;
    }

    /**
     * Gets the the {@code softDescription} property.
     * @return the property, not null
     */
    public final Property<String> softDescription() {
        return metaBean().softDescription().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the softVersionNumber.
     * @return the value of the property
     */
    public String getSoftVersionNumber() {
        return softVersionNumber;
    }

    /**
     * Sets the softVersionNumber.
     * @param softVersionNumber  the new value of the property
     */
    public void setSoftVersionNumber(String softVersionNumber) {
        this.softVersionNumber = softVersionNumber;
    }

    /**
     * Gets the the {@code softVersionNumber} property.
     * @return the property, not null
     */
    public final Property<String> softVersionNumber() {
        return metaBean().softVersionNumber().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the softName.
     * @return the value of the property
     */
    public String getSoftName() {
        return softName;
    }

    /**
     * Sets the softName.
     * @param softName  the new value of the property
     */
    public void setSoftName(String softName) {
        this.softName = softName;
    }

    /**
     * Gets the the {@code softName} property.
     * @return the property, not null
     */
    public final Property<String> softName() {
        return metaBean().softName().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the softATA.
     * @return the value of the property
     */
    public String getSoftATA() {
        return softATA;
    }

    /**
     * Sets the softATA.
     * @param softATA  the new value of the property
     */
    public void setSoftATA(String softATA) {
        this.softATA = softATA;
    }

    /**
     * Gets the the {@code softATA} property.
     * @return the property, not null
     */
    public final Property<String> softATA() {
        return metaBean().softATA().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the softUpdateDate.
     * @return the value of the property
     */
    public Date getSoftUpdateDate() {
        return softUpdateDate;
    }

    /**
     * Sets the softUpdateDate.
     * @param softUpdateDate  the new value of the property
     */
    public void setSoftUpdateDate(Date softUpdateDate) {
        this.softUpdateDate = softUpdateDate;
    }

    /**
     * Gets the the {@code softUpdateDate} property.
     * @return the property, not null
     */
    public final Property<Date> softUpdateDate() {
        return metaBean().softUpdateDate().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the eoOrder.
     * @return the value of the property
     */
    public EOOrder getEoOrder() {
        return eoOrder;
    }

    /**
     * Sets the eoOrder.
     * @param eoOrder  the new value of the property
     */
    public void setEoOrder(EOOrder eoOrder) {
        this.eoOrder = eoOrder;
    }

    /**
     * Gets the the {@code eoOrder} property.
     * @return the property, not null
     */
    public final Property<EOOrder> eoOrder() {
        return metaBean().eoOrder().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public EOAffectedSoftList clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            EOAffectedSoftList other = (EOAffectedSoftList) obj;
            return (getId() == other.getId()) &&
                    JodaBeanUtils.equal(getSoftNumber(), other.getSoftNumber()) &&
                    JodaBeanUtils.equal(getSoftDescription(), other.getSoftDescription()) &&
                    JodaBeanUtils.equal(getSoftVersionNumber(), other.getSoftVersionNumber()) &&
                    JodaBeanUtils.equal(getSoftName(), other.getSoftName()) &&
                    JodaBeanUtils.equal(getSoftATA(), other.getSoftATA()) &&
                    JodaBeanUtils.equal(getSoftUpdateDate(), other.getSoftUpdateDate()) &&
                    JodaBeanUtils.equal(getEoOrder(), other.getEoOrder()) &&
                    super.equals(obj);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = hash * 31 + JodaBeanUtils.hashCode(getId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getSoftNumber());
        hash = hash * 31 + JodaBeanUtils.hashCode(getSoftDescription());
        hash = hash * 31 + JodaBeanUtils.hashCode(getSoftVersionNumber());
        hash = hash * 31 + JodaBeanUtils.hashCode(getSoftName());
        hash = hash * 31 + JodaBeanUtils.hashCode(getSoftATA());
        hash = hash * 31 + JodaBeanUtils.hashCode(getSoftUpdateDate());
        hash = hash * 31 + JodaBeanUtils.hashCode(getEoOrder());
        return hash ^ super.hashCode();
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(288);
        buf.append("EOAffectedSoftList{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    @Override
    protected void toString(StringBuilder buf) {
        super.toString(buf);
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("softNumber").append('=').append(JodaBeanUtils.toString(getSoftNumber())).append(',').append(' ');
        buf.append("softDescription").append('=').append(JodaBeanUtils.toString(getSoftDescription())).append(',').append(' ');
        buf.append("softVersionNumber").append('=').append(JodaBeanUtils.toString(getSoftVersionNumber())).append(',').append(' ');
        buf.append("softName").append('=').append(JodaBeanUtils.toString(getSoftName())).append(',').append(' ');
        buf.append("softATA").append('=').append(JodaBeanUtils.toString(getSoftATA())).append(',').append(' ');
        buf.append("softUpdateDate").append('=').append(JodaBeanUtils.toString(getSoftUpdateDate())).append(',').append(' ');
        buf.append("eoOrder").append('=').append(JodaBeanUtils.toString(getEoOrder())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code EOAffectedSoftList}.
     */
    public static class Meta extends AedmsEntity.Meta {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<Long> id = DirectMetaProperty.ofReadWrite(
                this, "id", EOAffectedSoftList.class, Long.TYPE);
        /**
         * The meta-property for the {@code softNumber} property.
         */
        private final MetaProperty<String> softNumber = DirectMetaProperty.ofReadWrite(
                this, "softNumber", EOAffectedSoftList.class, String.class);
        /**
         * The meta-property for the {@code softDescription} property.
         */
        private final MetaProperty<String> softDescription = DirectMetaProperty.ofReadWrite(
                this, "softDescription", EOAffectedSoftList.class, String.class);
        /**
         * The meta-property for the {@code softVersionNumber} property.
         */
        private final MetaProperty<String> softVersionNumber = DirectMetaProperty.ofReadWrite(
                this, "softVersionNumber", EOAffectedSoftList.class, String.class);
        /**
         * The meta-property for the {@code softName} property.
         */
        private final MetaProperty<String> softName = DirectMetaProperty.ofReadWrite(
                this, "softName", EOAffectedSoftList.class, String.class);
        /**
         * The meta-property for the {@code softATA} property.
         */
        private final MetaProperty<String> softATA = DirectMetaProperty.ofReadWrite(
                this, "softATA", EOAffectedSoftList.class, String.class);
        /**
         * The meta-property for the {@code softUpdateDate} property.
         */
        private final MetaProperty<Date> softUpdateDate = DirectMetaProperty.ofReadWrite(
                this, "softUpdateDate", EOAffectedSoftList.class, Date.class);
        /**
         * The meta-property for the {@code eoOrder} property.
         */
        private final MetaProperty<EOOrder> eoOrder = DirectMetaProperty.ofReadWrite(
                this, "eoOrder", EOAffectedSoftList.class, EOOrder.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, (DirectMetaPropertyMap) super.metaPropertyMap(),
                "id",
                "softNumber",
                "softDescription",
                "softVersionNumber",
                "softName",
                "softATA",
                "softUpdateDate",
                "eoOrder");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case -294489069:  // softNumber
                    return softNumber;
                case -837953166:  // softDescription
                    return softDescription;
                case -2050444745:  // softVersionNumber
                    return softVersionNumber;
                case 1318108629:  // softName
                    return softName;
                case -2035703292:  // softATA
                    return softATA;
                case -822004767:  // softUpdateDate
                    return softUpdateDate;
                case -1597119292:  // eoOrder
                    return eoOrder;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends EOAffectedSoftList> builder() {
            return new DirectBeanBuilder<EOAffectedSoftList>(new EOAffectedSoftList());
        }

        @Override
        public Class<? extends EOAffectedSoftList> beanType() {
            return EOAffectedSoftList.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> id() {
            return id;
        }

        /**
         * The meta-property for the {@code softNumber} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> softNumber() {
            return softNumber;
        }

        /**
         * The meta-property for the {@code softDescription} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> softDescription() {
            return softDescription;
        }

        /**
         * The meta-property for the {@code softVersionNumber} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> softVersionNumber() {
            return softVersionNumber;
        }

        /**
         * The meta-property for the {@code softName} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> softName() {
            return softName;
        }

        /**
         * The meta-property for the {@code softATA} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> softATA() {
            return softATA;
        }

        /**
         * The meta-property for the {@code softUpdateDate} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Date> softUpdateDate() {
            return softUpdateDate;
        }

        /**
         * The meta-property for the {@code eoOrder} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<EOOrder> eoOrder() {
            return eoOrder;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((EOAffectedSoftList) bean).getId();
                case -294489069:  // softNumber
                    return ((EOAffectedSoftList) bean).getSoftNumber();
                case -837953166:  // softDescription
                    return ((EOAffectedSoftList) bean).getSoftDescription();
                case -2050444745:  // softVersionNumber
                    return ((EOAffectedSoftList) bean).getSoftVersionNumber();
                case 1318108629:  // softName
                    return ((EOAffectedSoftList) bean).getSoftName();
                case -2035703292:  // softATA
                    return ((EOAffectedSoftList) bean).getSoftATA();
                case -822004767:  // softUpdateDate
                    return ((EOAffectedSoftList) bean).getSoftUpdateDate();
                case -1597119292:  // eoOrder
                    return ((EOAffectedSoftList) bean).getEoOrder();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((EOAffectedSoftList) bean).setId((Long) newValue);
                    return;
                case -294489069:  // softNumber
                    ((EOAffectedSoftList) bean).setSoftNumber((String) newValue);
                    return;
                case -837953166:  // softDescription
                    ((EOAffectedSoftList) bean).setSoftDescription((String) newValue);
                    return;
                case -2050444745:  // softVersionNumber
                    ((EOAffectedSoftList) bean).setSoftVersionNumber((String) newValue);
                    return;
                case 1318108629:  // softName
                    ((EOAffectedSoftList) bean).setSoftName((String) newValue);
                    return;
                case -2035703292:  // softATA
                    ((EOAffectedSoftList) bean).setSoftATA((String) newValue);
                    return;
                case -822004767:  // softUpdateDate
                    ((EOAffectedSoftList) bean).setSoftUpdateDate((Date) newValue);
                    return;
                case -1597119292:  // eoOrder
                    ((EOAffectedSoftList) bean).setEoOrder((EOOrder) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

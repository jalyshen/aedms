package com.aedms.core.entities.eo;

import com.aedms.core.entities.AedmsEntity;
import fr.lteconsulting.UseBuilderGenerator;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import org.joda.beans.BeanDefinition;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 *
 * @author jaly
 */
@Entity
@Table(name = "EO_PRO_REPORT")
@BeanDefinition
public class EOProblemReport extends AedmsEntity {

    private static final long serialVersionUID = 1L;
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    @PropertyDefinition
    private long id;

    @Column(name = "EO_PRO_NO", length = 50)
    private String eoProblemNumber;

    @Column(name = "SUBJECT", length = 200)
    private String subject;

    @Column(name = "PROBLEM_DESC", length = 4000)
    private String problemDescription;

    @Column(name = "ACTION", length = 4000)
    private String action;

    @Column(name = "REPLY_DATE")
    @Temporal(javax.persistence.TemporalType.DATE)
    private Date replyDate;

    @Column(name = "REPLY", length = 4000)
    private String reply;

    @Column(name = "HANDLE_RESULT", length = 10)
    private String handleResult;

    @Column(name = "STATUS", length = 1)
    private char status;

    @Column(name = "CLOSE_TIME")
    @Temporal(javax.persistence.TemporalType.DATE)
    private Date closeTime;

    @Column(name = "EO_ORDER_ID")
    @OneToOne(optional = false, fetch = FetchType.LAZY, mappedBy = "eoProReport")
    private EOOrder eoOrder;

    public EOProblemReport() {
    }
    
    /**
     * 
     * @param eoProblemNumber
     * @param subject
     * @param problemDescription
     * @param action
     * @param replyDate
     * @param reply
     * @param handleResult
     * @param status
     * @param closeTime
     * @param eoOrder 
     */
    @UseBuilderGenerator
    public EOProblemReport(String eoProblemNumber, String subject, String problemDescription,
            String action, Date replyDate, String reply, String handleResult, char status,
            Date closeTime, EOOrder eoOrder) {
        this.eoProblemNumber = eoProblemNumber;
        this.subject = subject;
        this.problemDescription = problemDescription;
        this.action = action;
        this.replyDate = replyDate;
        this.reply = reply;
        this.handleResult = handleResult;
        this.status = status;
        this.closeTime = closeTime;
        this.eoOrder = eoOrder;
    }

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code EOProblemReport}.
     * @return the meta-bean, not null
     */
    public static EOProblemReport.Meta meta() {
        return EOProblemReport.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(EOProblemReport.Meta.INSTANCE);
    }

    @Override
    public EOProblemReport.Meta metaBean() {
        return EOProblemReport.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public long getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<Long> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public EOProblemReport clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            EOProblemReport other = (EOProblemReport) obj;
            return (getId() == other.getId()) &&
                    super.equals(obj);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = hash * 31 + JodaBeanUtils.hashCode(getId());
        return hash ^ super.hashCode();
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(64);
        buf.append("EOProblemReport{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    @Override
    protected void toString(StringBuilder buf) {
        super.toString(buf);
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code EOProblemReport}.
     */
    public static class Meta extends AedmsEntity.Meta {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<Long> id = DirectMetaProperty.ofReadWrite(
                this, "id", EOProblemReport.class, Long.TYPE);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, (DirectMetaPropertyMap) super.metaPropertyMap(),
                "id");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends EOProblemReport> builder() {
            return new DirectBeanBuilder<EOProblemReport>(new EOProblemReport());
        }

        @Override
        public Class<? extends EOProblemReport> beanType() {
            return EOProblemReport.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> id() {
            return id;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((EOProblemReport) bean).getId();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((EOProblemReport) bean).setId((Long) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

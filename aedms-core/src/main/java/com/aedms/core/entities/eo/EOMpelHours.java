package com.aedms.core.entities.eo;

import com.aedms.core.entities.AedmsEntity;
import fr.lteconsulting.UseBuilderGenerator;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import org.joda.beans.BeanDefinition;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 *
 * @author jaly
 */
@Entity
@Table(name = "EO_MPEL_HOURS")
@BeanDefinition
public class EOMpelHours extends AedmsEntity {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    @PropertyDefinition
    private long id;

    @Column(name = "PERSON_QUANTITY")
    @PropertyDefinition
    private int personQuantity;

    @Column(name = "TOTAL_TASK_HOURS")
    @PropertyDefinition
    private double totalTaskHours;

    @Column(name = "TOTAL_ELAPSED_HOURS")
    @PropertyDefinition
    private double totalElapsedHours;

    @Column(name = "TASK_MEMO", length = 4000)
    @PropertyDefinition
    private String taskMemo;

    @JoinColumn(name = "EO_GROUP_ID")
    @OneToOne(optional = false, fetch = FetchType.LAZY, mappedBy = "eoMpelHours")
    @PropertyDefinition
    private EOGroup eoGroup;

    public EOMpelHours() {
    }

   /**
    * 
    * @param personQuantity
    * @param totalTaskHours
    * @param totalElapsedHours
    * @param taskMemo
    * @param eoGroup 
    */
    @UseBuilderGenerator
    public EOMpelHours(int personQuantity, double totalTaskHours, 
            double totalElapsedHours, String taskMemo, EOGroup eoGroup) {
        this.personQuantity = personQuantity;
        this.totalElapsedHours = totalElapsedHours;
        this.totalTaskHours = totalTaskHours;
        this.taskMemo = taskMemo;
        this.eoGroup = eoGroup;
    }

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code EOMpelHours}.
     * @return the meta-bean, not null
     */
    public static EOMpelHours.Meta meta() {
        return EOMpelHours.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(EOMpelHours.Meta.INSTANCE);
    }

    @Override
    public EOMpelHours.Meta metaBean() {
        return EOMpelHours.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public long getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<Long> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the personQuantity.
     * @return the value of the property
     */
    public int getPersonQuantity() {
        return personQuantity;
    }

    /**
     * Sets the personQuantity.
     * @param personQuantity  the new value of the property
     */
    public void setPersonQuantity(int personQuantity) {
        this.personQuantity = personQuantity;
    }

    /**
     * Gets the the {@code personQuantity} property.
     * @return the property, not null
     */
    public final Property<Integer> personQuantity() {
        return metaBean().personQuantity().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the totalTaskHours.
     * @return the value of the property
     */
    public double getTotalTaskHours() {
        return totalTaskHours;
    }

    /**
     * Sets the totalTaskHours.
     * @param totalTaskHours  the new value of the property
     */
    public void setTotalTaskHours(double totalTaskHours) {
        this.totalTaskHours = totalTaskHours;
    }

    /**
     * Gets the the {@code totalTaskHours} property.
     * @return the property, not null
     */
    public final Property<Double> totalTaskHours() {
        return metaBean().totalTaskHours().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the totalElapsedHours.
     * @return the value of the property
     */
    public double getTotalElapsedHours() {
        return totalElapsedHours;
    }

    /**
     * Sets the totalElapsedHours.
     * @param totalElapsedHours  the new value of the property
     */
    public void setTotalElapsedHours(double totalElapsedHours) {
        this.totalElapsedHours = totalElapsedHours;
    }

    /**
     * Gets the the {@code totalElapsedHours} property.
     * @return the property, not null
     */
    public final Property<Double> totalElapsedHours() {
        return metaBean().totalElapsedHours().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the taskMemo.
     * @return the value of the property
     */
    public String getTaskMemo() {
        return taskMemo;
    }

    /**
     * Sets the taskMemo.
     * @param taskMemo  the new value of the property
     */
    public void setTaskMemo(String taskMemo) {
        this.taskMemo = taskMemo;
    }

    /**
     * Gets the the {@code taskMemo} property.
     * @return the property, not null
     */
    public final Property<String> taskMemo() {
        return metaBean().taskMemo().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the eoGroup.
     * @return the value of the property
     */
    public EOGroup getEoGroup() {
        return eoGroup;
    }

    /**
     * Sets the eoGroup.
     * @param eoGroup  the new value of the property
     */
    public void setEoGroup(EOGroup eoGroup) {
        this.eoGroup = eoGroup;
    }

    /**
     * Gets the the {@code eoGroup} property.
     * @return the property, not null
     */
    public final Property<EOGroup> eoGroup() {
        return metaBean().eoGroup().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public EOMpelHours clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            EOMpelHours other = (EOMpelHours) obj;
            return (getId() == other.getId()) &&
                    (getPersonQuantity() == other.getPersonQuantity()) &&
                    JodaBeanUtils.equal(getTotalTaskHours(), other.getTotalTaskHours()) &&
                    JodaBeanUtils.equal(getTotalElapsedHours(), other.getTotalElapsedHours()) &&
                    JodaBeanUtils.equal(getTaskMemo(), other.getTaskMemo()) &&
                    JodaBeanUtils.equal(getEoGroup(), other.getEoGroup()) &&
                    super.equals(obj);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = hash * 31 + JodaBeanUtils.hashCode(getId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPersonQuantity());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTotalTaskHours());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTotalElapsedHours());
        hash = hash * 31 + JodaBeanUtils.hashCode(getTaskMemo());
        hash = hash * 31 + JodaBeanUtils.hashCode(getEoGroup());
        return hash ^ super.hashCode();
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(224);
        buf.append("EOMpelHours{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    @Override
    protected void toString(StringBuilder buf) {
        super.toString(buf);
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("personQuantity").append('=').append(JodaBeanUtils.toString(getPersonQuantity())).append(',').append(' ');
        buf.append("totalTaskHours").append('=').append(JodaBeanUtils.toString(getTotalTaskHours())).append(',').append(' ');
        buf.append("totalElapsedHours").append('=').append(JodaBeanUtils.toString(getTotalElapsedHours())).append(',').append(' ');
        buf.append("taskMemo").append('=').append(JodaBeanUtils.toString(getTaskMemo())).append(',').append(' ');
        buf.append("eoGroup").append('=').append(JodaBeanUtils.toString(getEoGroup())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code EOMpelHours}.
     */
    public static class Meta extends AedmsEntity.Meta {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<Long> id = DirectMetaProperty.ofReadWrite(
                this, "id", EOMpelHours.class, Long.TYPE);
        /**
         * The meta-property for the {@code personQuantity} property.
         */
        private final MetaProperty<Integer> personQuantity = DirectMetaProperty.ofReadWrite(
                this, "personQuantity", EOMpelHours.class, Integer.TYPE);
        /**
         * The meta-property for the {@code totalTaskHours} property.
         */
        private final MetaProperty<Double> totalTaskHours = DirectMetaProperty.ofReadWrite(
                this, "totalTaskHours", EOMpelHours.class, Double.TYPE);
        /**
         * The meta-property for the {@code totalElapsedHours} property.
         */
        private final MetaProperty<Double> totalElapsedHours = DirectMetaProperty.ofReadWrite(
                this, "totalElapsedHours", EOMpelHours.class, Double.TYPE);
        /**
         * The meta-property for the {@code taskMemo} property.
         */
        private final MetaProperty<String> taskMemo = DirectMetaProperty.ofReadWrite(
                this, "taskMemo", EOMpelHours.class, String.class);
        /**
         * The meta-property for the {@code eoGroup} property.
         */
        private final MetaProperty<EOGroup> eoGroup = DirectMetaProperty.ofReadWrite(
                this, "eoGroup", EOMpelHours.class, EOGroup.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, (DirectMetaPropertyMap) super.metaPropertyMap(),
                "id",
                "personQuantity",
                "totalTaskHours",
                "totalElapsedHours",
                "taskMemo",
                "eoGroup");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case -1827389696:  // personQuantity
                    return personQuantity;
                case 979762598:  // totalTaskHours
                    return totalTaskHours;
                case -807306153:  // totalElapsedHours
                    return totalElapsedHours;
                case -410356641:  // taskMemo
                    return taskMemo;
                case -1604496395:  // eoGroup
                    return eoGroup;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends EOMpelHours> builder() {
            return new DirectBeanBuilder<EOMpelHours>(new EOMpelHours());
        }

        @Override
        public Class<? extends EOMpelHours> beanType() {
            return EOMpelHours.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> id() {
            return id;
        }

        /**
         * The meta-property for the {@code personQuantity} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Integer> personQuantity() {
            return personQuantity;
        }

        /**
         * The meta-property for the {@code totalTaskHours} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Double> totalTaskHours() {
            return totalTaskHours;
        }

        /**
         * The meta-property for the {@code totalElapsedHours} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Double> totalElapsedHours() {
            return totalElapsedHours;
        }

        /**
         * The meta-property for the {@code taskMemo} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> taskMemo() {
            return taskMemo;
        }

        /**
         * The meta-property for the {@code eoGroup} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<EOGroup> eoGroup() {
            return eoGroup;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((EOMpelHours) bean).getId();
                case -1827389696:  // personQuantity
                    return ((EOMpelHours) bean).getPersonQuantity();
                case 979762598:  // totalTaskHours
                    return ((EOMpelHours) bean).getTotalTaskHours();
                case -807306153:  // totalElapsedHours
                    return ((EOMpelHours) bean).getTotalElapsedHours();
                case -410356641:  // taskMemo
                    return ((EOMpelHours) bean).getTaskMemo();
                case -1604496395:  // eoGroup
                    return ((EOMpelHours) bean).getEoGroup();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((EOMpelHours) bean).setId((Long) newValue);
                    return;
                case -1827389696:  // personQuantity
                    ((EOMpelHours) bean).setPersonQuantity((Integer) newValue);
                    return;
                case 979762598:  // totalTaskHours
                    ((EOMpelHours) bean).setTotalTaskHours((Double) newValue);
                    return;
                case -807306153:  // totalElapsedHours
                    ((EOMpelHours) bean).setTotalElapsedHours((Double) newValue);
                    return;
                case -410356641:  // taskMemo
                    ((EOMpelHours) bean).setTaskMemo((String) newValue);
                    return;
                case -1604496395:  // eoGroup
                    ((EOMpelHours) bean).setEoGroup((EOGroup) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

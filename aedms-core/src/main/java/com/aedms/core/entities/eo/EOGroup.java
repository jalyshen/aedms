package com.aedms.core.entities.eo;

import com.aedms.core.entities.AedmsEntity;
import fr.lteconsulting.UseBuilderGenerator;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import org.joda.beans.Bean;
import org.joda.beans.BeanDefinition;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 *
 * @author jaly
 */
@Entity
@Table(name = "EO_GROUP")
@BeanDefinition
public class EOGroup extends AedmsEntity {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    @PropertyDefinition
    private long id;

    @Column(name = "GROUP_NO", length = 50)
    @PropertyDefinition
    private String groupNumber;

    @Column(name = "EFF_TEXT", length = 4000)
    @PropertyDefinition
    private String effText;

    @Column(name = "OTHER", length = 4000)
    @PropertyDefinition
    private String other;

    @Column(name = "EO_ORDER_ID")
    @PropertyDefinition
    @OneToOne
    private EOOrder eoOrder;

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "EO_GROUP_AFFECT")
    @PropertyDefinition(type = "Set<>")
    private Set<Affect> affects;

    public EOGroup() {
    }

    /**
     *
     * @param groupNumber
     * @param effText
     * @param other
     * @param eoOrder
     * @param affects
     */
    @UseBuilderGenerator
    public EOGroup(String groupNumber, String effText, String other, EOOrder eoOrder, Set<Affect> affects) {
        this.groupNumber = groupNumber;
        this.effText = effText;
        this.other = other;
        this.eoOrder = eoOrder;
        this.affects = affects;
    }

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code EOGroup}.
     * @return the meta-bean, not null
     */
    public static EOGroup.Meta meta() {
        return EOGroup.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(EOGroup.Meta.INSTANCE);
    }

    @Override
    public EOGroup.Meta metaBean() {
        return EOGroup.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public long getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<Long> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the groupNumber.
     * @return the value of the property
     */
    public String getGroupNumber() {
        return groupNumber;
    }

    /**
     * Sets the groupNumber.
     * @param groupNumber  the new value of the property
     */
    public void setGroupNumber(String groupNumber) {
        this.groupNumber = groupNumber;
    }

    /**
     * Gets the the {@code groupNumber} property.
     * @return the property, not null
     */
    public final Property<String> groupNumber() {
        return metaBean().groupNumber().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the effText.
     * @return the value of the property
     */
    public String getEffText() {
        return effText;
    }

    /**
     * Sets the effText.
     * @param effText  the new value of the property
     */
    public void setEffText(String effText) {
        this.effText = effText;
    }

    /**
     * Gets the the {@code effText} property.
     * @return the property, not null
     */
    public final Property<String> effText() {
        return metaBean().effText().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the other.
     * @return the value of the property
     */
    public String getOther() {
        return other;
    }

    /**
     * Sets the other.
     * @param other  the new value of the property
     */
    public void setOther(String other) {
        this.other = other;
    }

    /**
     * Gets the the {@code other} property.
     * @return the property, not null
     */
    public final Property<String> other() {
        return metaBean().other().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the eoOrder.
     * @return the value of the property
     */
    public EOOrder getEoOrder() {
        return eoOrder;
    }

    /**
     * Sets the eoOrder.
     * @param eoOrder  the new value of the property
     */
    public void setEoOrder(EOOrder eoOrder) {
        this.eoOrder = eoOrder;
    }

    /**
     * Gets the the {@code eoOrder} property.
     * @return the property, not null
     */
    public final Property<EOOrder> eoOrder() {
        return metaBean().eoOrder().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the affects.
     * @return the value of the property
     */
    public Set<Affect> getAffects() {
        return affects;
    }

    /**
     * Sets the affects.
     * @param affects  the new value of the property
     */
    public void setAffects(Set<Affect> affects) {
        this.affects = affects;
    }

    /**
     * Gets the the {@code affects} property.
     * @return the property, not null
     */
    public final Property<Set<Affect>> affects() {
        return metaBean().affects().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public EOGroup clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            EOGroup other = (EOGroup) obj;
            return (getId() == other.getId()) &&
                    JodaBeanUtils.equal(getGroupNumber(), other.getGroupNumber()) &&
                    JodaBeanUtils.equal(getEffText(), other.getEffText()) &&
                    JodaBeanUtils.equal(getOther(), other.getOther()) &&
                    JodaBeanUtils.equal(getEoOrder(), other.getEoOrder()) &&
                    JodaBeanUtils.equal(getAffects(), other.getAffects()) &&
                    super.equals(obj);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = hash * 31 + JodaBeanUtils.hashCode(getId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getGroupNumber());
        hash = hash * 31 + JodaBeanUtils.hashCode(getEffText());
        hash = hash * 31 + JodaBeanUtils.hashCode(getOther());
        hash = hash * 31 + JodaBeanUtils.hashCode(getEoOrder());
        hash = hash * 31 + JodaBeanUtils.hashCode(getAffects());
        return hash ^ super.hashCode();
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(224);
        buf.append("EOGroup{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    @Override
    protected void toString(StringBuilder buf) {
        super.toString(buf);
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("groupNumber").append('=').append(JodaBeanUtils.toString(getGroupNumber())).append(',').append(' ');
        buf.append("effText").append('=').append(JodaBeanUtils.toString(getEffText())).append(',').append(' ');
        buf.append("other").append('=').append(JodaBeanUtils.toString(getOther())).append(',').append(' ');
        buf.append("eoOrder").append('=').append(JodaBeanUtils.toString(getEoOrder())).append(',').append(' ');
        buf.append("affects").append('=').append(JodaBeanUtils.toString(getAffects())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code EOGroup}.
     */
    public static class Meta extends AedmsEntity.Meta {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<Long> id = DirectMetaProperty.ofReadWrite(
                this, "id", EOGroup.class, Long.TYPE);
        /**
         * The meta-property for the {@code groupNumber} property.
         */
        private final MetaProperty<String> groupNumber = DirectMetaProperty.ofReadWrite(
                this, "groupNumber", EOGroup.class, String.class);
        /**
         * The meta-property for the {@code effText} property.
         */
        private final MetaProperty<String> effText = DirectMetaProperty.ofReadWrite(
                this, "effText", EOGroup.class, String.class);
        /**
         * The meta-property for the {@code other} property.
         */
        private final MetaProperty<String> other = DirectMetaProperty.ofReadWrite(
                this, "other", EOGroup.class, String.class);
        /**
         * The meta-property for the {@code eoOrder} property.
         */
        private final MetaProperty<EOOrder> eoOrder = DirectMetaProperty.ofReadWrite(
                this, "eoOrder", EOGroup.class, EOOrder.class);
        /**
         * The meta-property for the {@code affects} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<Set<Affect>> affects = DirectMetaProperty.ofReadWrite(
                this, "affects", EOGroup.class, (Class) Set.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, (DirectMetaPropertyMap) super.metaPropertyMap(),
                "id",
                "groupNumber",
                "effText",
                "other",
                "eoOrder",
                "affects");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case 616932008:  // groupNumber
                    return groupNumber;
                case -1834432846:  // effText
                    return effText;
                case 106069776:  // other
                    return other;
                case -1597119292:  // eoOrder
                    return eoOrder;
                case -1088975874:  // affects
                    return affects;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends EOGroup> builder() {
            return new DirectBeanBuilder<EOGroup>(new EOGroup());
        }

        @Override
        public Class<? extends EOGroup> beanType() {
            return EOGroup.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> id() {
            return id;
        }

        /**
         * The meta-property for the {@code groupNumber} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> groupNumber() {
            return groupNumber;
        }

        /**
         * The meta-property for the {@code effText} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> effText() {
            return effText;
        }

        /**
         * The meta-property for the {@code other} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> other() {
            return other;
        }

        /**
         * The meta-property for the {@code eoOrder} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<EOOrder> eoOrder() {
            return eoOrder;
        }

        /**
         * The meta-property for the {@code affects} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Set<Affect>> affects() {
            return affects;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((EOGroup) bean).getId();
                case 616932008:  // groupNumber
                    return ((EOGroup) bean).getGroupNumber();
                case -1834432846:  // effText
                    return ((EOGroup) bean).getEffText();
                case 106069776:  // other
                    return ((EOGroup) bean).getOther();
                case -1597119292:  // eoOrder
                    return ((EOGroup) bean).getEoOrder();
                case -1088975874:  // affects
                    return ((EOGroup) bean).getAffects();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((EOGroup) bean).setId((Long) newValue);
                    return;
                case 616932008:  // groupNumber
                    ((EOGroup) bean).setGroupNumber((String) newValue);
                    return;
                case -1834432846:  // effText
                    ((EOGroup) bean).setEffText((String) newValue);
                    return;
                case 106069776:  // other
                    ((EOGroup) bean).setOther((String) newValue);
                    return;
                case -1597119292:  // eoOrder
                    ((EOGroup) bean).setEoOrder((EOOrder) newValue);
                    return;
                case -1088975874:  // affects
                    ((EOGroup) bean).setAffects((Set<Affect>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

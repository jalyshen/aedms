package com.aedms.core.entities.source;

import com.aedms.core.entities.AedmsEntity;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import fr.lteconsulting.Mandatory;
import fr.lteconsulting.UseBuilderGenerator;
import javax.persistence.OneToOne;
import org.joda.beans.BeanDefinition;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * The Entity to representing Organization record. The physical table is "ORGANIZATION"
 *
 * @author jaly
 */
@Entity
@Table(name = "ORGANIZATION")
@BeanDefinition
public class Organization extends AedmsEntity {

    private static final long serialVersionUID = 1L;
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    @PropertyDefinition
    private Long id;
    
    @Column(name = "DEP_CODE")
    @PropertyDefinition
    private String depCode;
    
    @Column(name = "DEP_NAME")
    @PropertyDefinition
    private String depName;
    
    @Column(name = "PARENT_ORG_ID")
    @PropertyDefinition
    @OneToOne
    private Organization parentOrg;
    
    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy = "organization")
    @PropertyDefinition
    private Set<User> users;

    /**Constructor list block
     */
    public Organization(){}
    
    @UseBuilderGenerator
    public Organization(@Mandatory String depCode, @Mandatory String depName, Organization parentOrg, Set<User> users) {
        super();
        this.depCode = depCode;
        this.depName = depName;
        this.parentOrg = parentOrg;
        this.users = users;
    }
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code Organization}.
     * @return the meta-bean, not null
     */
    public static Organization.Meta meta() {
        return Organization.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(Organization.Meta.INSTANCE);
    }

    @Override
    public Organization.Meta metaBean() {
        return Organization.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<Long> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the depCode.
     * @return the value of the property
     */
    public String getDepCode() {
        return depCode;
    }

    /**
     * Sets the depCode.
     * @param depCode  the new value of the property
     */
    public void setDepCode(String depCode) {
        this.depCode = depCode;
    }

    /**
     * Gets the the {@code depCode} property.
     * @return the property, not null
     */
    public final Property<String> depCode() {
        return metaBean().depCode().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the depName.
     * @return the value of the property
     */
    public String getDepName() {
        return depName;
    }

    /**
     * Sets the depName.
     * @param depName  the new value of the property
     */
    public void setDepName(String depName) {
        this.depName = depName;
    }

    /**
     * Gets the the {@code depName} property.
     * @return the property, not null
     */
    public final Property<String> depName() {
        return metaBean().depName().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the parentOrg.
     * @return the value of the property
     */
    public Organization getParentOrg() {
        return parentOrg;
    }

    /**
     * Sets the parentOrg.
     * @param parentOrg  the new value of the property
     */
    public void setParentOrg(Organization parentOrg) {
        this.parentOrg = parentOrg;
    }

    /**
     * Gets the the {@code parentOrg} property.
     * @return the property, not null
     */
    public final Property<Organization> parentOrg() {
        return metaBean().parentOrg().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the users.
     * @return the value of the property
     */
    public Set<User> getUsers() {
        return users;
    }

    /**
     * Sets the users.
     * @param users  the new value of the property
     */
    public void setUsers(Set<User> users) {
        this.users = users;
    }

    /**
     * Gets the the {@code users} property.
     * @return the property, not null
     */
    public final Property<Set<User>> users() {
        return metaBean().users().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public Organization clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            Organization other = (Organization) obj;
            return JodaBeanUtils.equal(getId(), other.getId()) &&
                    JodaBeanUtils.equal(getDepCode(), other.getDepCode()) &&
                    JodaBeanUtils.equal(getDepName(), other.getDepName()) &&
                    JodaBeanUtils.equal(getParentOrg(), other.getParentOrg()) &&
                    JodaBeanUtils.equal(getUsers(), other.getUsers()) &&
                    super.equals(obj);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = hash * 31 + JodaBeanUtils.hashCode(getId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getDepCode());
        hash = hash * 31 + JodaBeanUtils.hashCode(getDepName());
        hash = hash * 31 + JodaBeanUtils.hashCode(getParentOrg());
        hash = hash * 31 + JodaBeanUtils.hashCode(getUsers());
        return hash ^ super.hashCode();
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(192);
        buf.append("Organization{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    @Override
    protected void toString(StringBuilder buf) {
        super.toString(buf);
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("depCode").append('=').append(JodaBeanUtils.toString(getDepCode())).append(',').append(' ');
        buf.append("depName").append('=').append(JodaBeanUtils.toString(getDepName())).append(',').append(' ');
        buf.append("parentOrg").append('=').append(JodaBeanUtils.toString(getParentOrg())).append(',').append(' ');
        buf.append("users").append('=').append(JodaBeanUtils.toString(getUsers())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code Organization}.
     */
    public static class Meta extends AedmsEntity.Meta {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<Long> id = DirectMetaProperty.ofReadWrite(
                this, "id", Organization.class, Long.class);
        /**
         * The meta-property for the {@code depCode} property.
         */
        private final MetaProperty<String> depCode = DirectMetaProperty.ofReadWrite(
                this, "depCode", Organization.class, String.class);
        /**
         * The meta-property for the {@code depName} property.
         */
        private final MetaProperty<String> depName = DirectMetaProperty.ofReadWrite(
                this, "depName", Organization.class, String.class);
        /**
         * The meta-property for the {@code parentOrg} property.
         */
        private final MetaProperty<Organization> parentOrg = DirectMetaProperty.ofReadWrite(
                this, "parentOrg", Organization.class, Organization.class);
        /**
         * The meta-property for the {@code users} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<Set<User>> users = DirectMetaProperty.ofReadWrite(
                this, "users", Organization.class, (Class) Set.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, (DirectMetaPropertyMap) super.metaPropertyMap(),
                "id",
                "depCode",
                "depName",
                "parentOrg",
                "users");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case 1553139356:  // depCode
                    return depCode;
                case 1553453882:  // depName
                    return depName;
                case 2070312410:  // parentOrg
                    return parentOrg;
                case 111578632:  // users
                    return users;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends Organization> builder() {
            return new DirectBeanBuilder<Organization>(new Organization());
        }

        @Override
        public Class<? extends Organization> beanType() {
            return Organization.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> id() {
            return id;
        }

        /**
         * The meta-property for the {@code depCode} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> depCode() {
            return depCode;
        }

        /**
         * The meta-property for the {@code depName} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> depName() {
            return depName;
        }

        /**
         * The meta-property for the {@code parentOrg} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Organization> parentOrg() {
            return parentOrg;
        }

        /**
         * The meta-property for the {@code users} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Set<User>> users() {
            return users;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((Organization) bean).getId();
                case 1553139356:  // depCode
                    return ((Organization) bean).getDepCode();
                case 1553453882:  // depName
                    return ((Organization) bean).getDepName();
                case 2070312410:  // parentOrg
                    return ((Organization) bean).getParentOrg();
                case 111578632:  // users
                    return ((Organization) bean).getUsers();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((Organization) bean).setId((Long) newValue);
                    return;
                case 1553139356:  // depCode
                    ((Organization) bean).setDepCode((String) newValue);
                    return;
                case 1553453882:  // depName
                    ((Organization) bean).setDepName((String) newValue);
                    return;
                case 2070312410:  // parentOrg
                    ((Organization) bean).setParentOrg((Organization) newValue);
                    return;
                case 111578632:  // users
                    ((Organization) bean).setUsers((Set<User>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

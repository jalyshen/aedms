package com.aedms.core.entities.eo;

import java.io.Serializable;
import java.util.Date;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;

import org.joda.beans.BeanDefinition;
import java.util.Map;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectMetaProperty;

@Entity
@Table(name = "AD")
@BeanDefinition
public class AirworthDirective implements Serializable, Bean {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    @PropertyDefinition
    private long id;
    
    @Column(name="AD_NUMBER", length=45)
    @PropertyDefinition
    private String adNumber;
    
    @Column(name="AD_LINK", length=200)
    @PropertyDefinition
    private String adLink;
    

    @Column(name = "ISSUE_DATE")
    @Temporal(javax.persistence.TemporalType.DATE)
    @PropertyDefinition
    private Date issueDate;

    // Link to authority;
    @ManyToOne
    @JoinColumn(name="AUTHORITY_ID", nullable=false)
    @PropertyDefinition
    private Authority authority;
    
    @ManyToMany(mappedBy="airworthDirectives")
    @PropertyDefinition
    private Set<EOOrder> eorders;
    

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code AirworthDirective}.
     * @return the meta-bean, not null
     */
    public static AirworthDirective.Meta meta() {
        return AirworthDirective.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(AirworthDirective.Meta.INSTANCE);
    }

    @Override
    public AirworthDirective.Meta metaBean() {
        return AirworthDirective.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public long getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<Long> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the adNumber.
     * @return the value of the property
     */
    public String getAdNumber() {
        return adNumber;
    }

    /**
     * Sets the adNumber.
     * @param adNumber  the new value of the property
     */
    public void setAdNumber(String adNumber) {
        this.adNumber = adNumber;
    }

    /**
     * Gets the the {@code adNumber} property.
     * @return the property, not null
     */
    public final Property<String> adNumber() {
        return metaBean().adNumber().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the adLink.
     * @return the value of the property
     */
    public String getAdLink() {
        return adLink;
    }

    /**
     * Sets the adLink.
     * @param adLink  the new value of the property
     */
    public void setAdLink(String adLink) {
        this.adLink = adLink;
    }

    /**
     * Gets the the {@code adLink} property.
     * @return the property, not null
     */
    public final Property<String> adLink() {
        return metaBean().adLink().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the issueDate.
     * @return the value of the property
     */
    public Date getIssueDate() {
        return issueDate;
    }

    /**
     * Sets the issueDate.
     * @param issueDate  the new value of the property
     */
    public void setIssueDate(Date issueDate) {
        this.issueDate = issueDate;
    }

    /**
     * Gets the the {@code issueDate} property.
     * @return the property, not null
     */
    public final Property<Date> issueDate() {
        return metaBean().issueDate().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the authority.
     * @return the value of the property
     */
    public Authority getAuthority() {
        return authority;
    }

    /**
     * Sets the authority.
     * @param authority  the new value of the property
     */
    public void setAuthority(Authority authority) {
        this.authority = authority;
    }

    /**
     * Gets the the {@code authority} property.
     * @return the property, not null
     */
    public final Property<Authority> authority() {
        return metaBean().authority().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the eorders.
     * @return the value of the property
     */
    public Set<EOOrder> getEorders() {
        return eorders;
    }

    /**
     * Sets the eorders.
     * @param eorders  the new value of the property
     */
    public void setEorders(Set<EOOrder> eorders) {
        this.eorders = eorders;
    }

    /**
     * Gets the the {@code eorders} property.
     * @return the property, not null
     */
    public final Property<Set<EOOrder>> eorders() {
        return metaBean().eorders().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public AirworthDirective clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            AirworthDirective other = (AirworthDirective) obj;
            return (getId() == other.getId()) &&
                    JodaBeanUtils.equal(getAdNumber(), other.getAdNumber()) &&
                    JodaBeanUtils.equal(getAdLink(), other.getAdLink()) &&
                    JodaBeanUtils.equal(getIssueDate(), other.getIssueDate()) &&
                    JodaBeanUtils.equal(getAuthority(), other.getAuthority()) &&
                    JodaBeanUtils.equal(getEorders(), other.getEorders());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getAdNumber());
        hash = hash * 31 + JodaBeanUtils.hashCode(getAdLink());
        hash = hash * 31 + JodaBeanUtils.hashCode(getIssueDate());
        hash = hash * 31 + JodaBeanUtils.hashCode(getAuthority());
        hash = hash * 31 + JodaBeanUtils.hashCode(getEorders());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(224);
        buf.append("AirworthDirective{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("adNumber").append('=').append(JodaBeanUtils.toString(getAdNumber())).append(',').append(' ');
        buf.append("adLink").append('=').append(JodaBeanUtils.toString(getAdLink())).append(',').append(' ');
        buf.append("issueDate").append('=').append(JodaBeanUtils.toString(getIssueDate())).append(',').append(' ');
        buf.append("authority").append('=').append(JodaBeanUtils.toString(getAuthority())).append(',').append(' ');
        buf.append("eorders").append('=').append(JodaBeanUtils.toString(getEorders())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code AirworthDirective}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<Long> id = DirectMetaProperty.ofReadWrite(
                this, "id", AirworthDirective.class, Long.TYPE);
        /**
         * The meta-property for the {@code adNumber} property.
         */
        private final MetaProperty<String> adNumber = DirectMetaProperty.ofReadWrite(
                this, "adNumber", AirworthDirective.class, String.class);
        /**
         * The meta-property for the {@code adLink} property.
         */
        private final MetaProperty<String> adLink = DirectMetaProperty.ofReadWrite(
                this, "adLink", AirworthDirective.class, String.class);
        /**
         * The meta-property for the {@code issueDate} property.
         */
        private final MetaProperty<Date> issueDate = DirectMetaProperty.ofReadWrite(
                this, "issueDate", AirworthDirective.class, Date.class);
        /**
         * The meta-property for the {@code authority} property.
         */
        private final MetaProperty<Authority> authority = DirectMetaProperty.ofReadWrite(
                this, "authority", AirworthDirective.class, Authority.class);
        /**
         * The meta-property for the {@code eorders} property.
         */
        @SuppressWarnings({"unchecked", "rawtypes" })
        private final MetaProperty<Set<EOOrder>> eorders = DirectMetaProperty.ofReadWrite(
                this, "eorders", AirworthDirective.class, (Class) Set.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "id",
                "adNumber",
                "adLink",
                "issueDate",
                "authority",
                "eorders");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case -1845564084:  // adNumber
                    return adNumber;
                case -1423219011:  // adLink
                    return adLink;
                case 184285223:  // issueDate
                    return issueDate;
                case 1475610435:  // authority
                    return authority;
                case -1565211766:  // eorders
                    return eorders;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends AirworthDirective> builder() {
            return new DirectBeanBuilder<AirworthDirective>(new AirworthDirective());
        }

        @Override
        public Class<? extends AirworthDirective> beanType() {
            return AirworthDirective.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> id() {
            return id;
        }

        /**
         * The meta-property for the {@code adNumber} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> adNumber() {
            return adNumber;
        }

        /**
         * The meta-property for the {@code adLink} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> adLink() {
            return adLink;
        }

        /**
         * The meta-property for the {@code issueDate} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Date> issueDate() {
            return issueDate;
        }

        /**
         * The meta-property for the {@code authority} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Authority> authority() {
            return authority;
        }

        /**
         * The meta-property for the {@code eorders} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Set<EOOrder>> eorders() {
            return eorders;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((AirworthDirective) bean).getId();
                case -1845564084:  // adNumber
                    return ((AirworthDirective) bean).getAdNumber();
                case -1423219011:  // adLink
                    return ((AirworthDirective) bean).getAdLink();
                case 184285223:  // issueDate
                    return ((AirworthDirective) bean).getIssueDate();
                case 1475610435:  // authority
                    return ((AirworthDirective) bean).getAuthority();
                case -1565211766:  // eorders
                    return ((AirworthDirective) bean).getEorders();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((AirworthDirective) bean).setId((Long) newValue);
                    return;
                case -1845564084:  // adNumber
                    ((AirworthDirective) bean).setAdNumber((String) newValue);
                    return;
                case -1423219011:  // adLink
                    ((AirworthDirective) bean).setAdLink((String) newValue);
                    return;
                case 184285223:  // issueDate
                    ((AirworthDirective) bean).setIssueDate((Date) newValue);
                    return;
                case 1475610435:  // authority
                    ((AirworthDirective) bean).setAuthority((Authority) newValue);
                    return;
                case -1565211766:  // eorders
                    ((AirworthDirective) bean).setEorders((Set<EOOrder>) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

package com.aedms.core.entities.eo;

import com.aedms.core.entities.AedmsEntity;
import fr.lteconsulting.UseBuilderGenerator;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import org.joda.beans.BeanDefinition;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 *
 * @author jaly
 */
@Entity
@Table(name = "EO_MAT_LIST")
@BeanDefinition
public class EOMatList extends AedmsEntity {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    @PropertyDefinition
    private long id;

    @Column(name = "MAT_NO", length = 50)
    @PropertyDefinition
    private String matNumber;

    @Column(name = "MAT_NAME", length = 500)
    @PropertyDefinition
    private String matName;

    @Column(name = "MAT_PRICE")
    @PropertyDefinition
    private double matPrice;

    @Column(name = "MAT_PRICE_UNIT", length = 20)
    @PropertyDefinition
    private String matPriceUnit;

    @Column(name = "MAT_MEMO", length = 4000)
    @PropertyDefinition
    private String matMemo;

    @JoinColumn(name = "EO_GROUP_ID")
    @OneToOne(optional = false, fetch = FetchType.LAZY, mappedBy = "eoMatList")
    @PropertyDefinition
    private EOGroup eoGroup;

    public EOMatList() {
    }
    
    /**
     * 
     * @param matNumber
     * @param matName
     * @param matPrice
     * @param matPriceUnit
     * @param matMemo
     * @param eoGroup 
     */
    @UseBuilderGenerator
    public EOMatList(String matNumber, String matName, double matPrice, 
            String matPriceUnit, String matMemo, EOGroup eoGroup) {
        this.matNumber = matNumber;
        this.matName = matName;
        this.matPrice = matPrice;
        this.matPriceUnit = matPriceUnit;
        this.matMemo = matMemo;
        this.eoGroup = eoGroup;
    }

    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code EOMatList}.
     * @return the meta-bean, not null
     */
    public static EOMatList.Meta meta() {
        return EOMatList.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(EOMatList.Meta.INSTANCE);
    }

    @Override
    public EOMatList.Meta metaBean() {
        return EOMatList.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public long getId() {
        return id;
    }

    /**
     * Sets the id.
     * @param id  the new value of the property
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * Gets the the {@code id} property.
     * @return the property, not null
     */
    public final Property<Long> id() {
        return metaBean().id().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the matNumber.
     * @return the value of the property
     */
    public String getMatNumber() {
        return matNumber;
    }

    /**
     * Sets the matNumber.
     * @param matNumber  the new value of the property
     */
    public void setMatNumber(String matNumber) {
        this.matNumber = matNumber;
    }

    /**
     * Gets the the {@code matNumber} property.
     * @return the property, not null
     */
    public final Property<String> matNumber() {
        return metaBean().matNumber().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the matName.
     * @return the value of the property
     */
    public String getMatName() {
        return matName;
    }

    /**
     * Sets the matName.
     * @param matName  the new value of the property
     */
    public void setMatName(String matName) {
        this.matName = matName;
    }

    /**
     * Gets the the {@code matName} property.
     * @return the property, not null
     */
    public final Property<String> matName() {
        return metaBean().matName().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the matPrice.
     * @return the value of the property
     */
    public double getMatPrice() {
        return matPrice;
    }

    /**
     * Sets the matPrice.
     * @param matPrice  the new value of the property
     */
    public void setMatPrice(double matPrice) {
        this.matPrice = matPrice;
    }

    /**
     * Gets the the {@code matPrice} property.
     * @return the property, not null
     */
    public final Property<Double> matPrice() {
        return metaBean().matPrice().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the matPriceUnit.
     * @return the value of the property
     */
    public String getMatPriceUnit() {
        return matPriceUnit;
    }

    /**
     * Sets the matPriceUnit.
     * @param matPriceUnit  the new value of the property
     */
    public void setMatPriceUnit(String matPriceUnit) {
        this.matPriceUnit = matPriceUnit;
    }

    /**
     * Gets the the {@code matPriceUnit} property.
     * @return the property, not null
     */
    public final Property<String> matPriceUnit() {
        return metaBean().matPriceUnit().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the matMemo.
     * @return the value of the property
     */
    public String getMatMemo() {
        return matMemo;
    }

    /**
     * Sets the matMemo.
     * @param matMemo  the new value of the property
     */
    public void setMatMemo(String matMemo) {
        this.matMemo = matMemo;
    }

    /**
     * Gets the the {@code matMemo} property.
     * @return the property, not null
     */
    public final Property<String> matMemo() {
        return metaBean().matMemo().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the eoGroup.
     * @return the value of the property
     */
    public EOGroup getEoGroup() {
        return eoGroup;
    }

    /**
     * Sets the eoGroup.
     * @param eoGroup  the new value of the property
     */
    public void setEoGroup(EOGroup eoGroup) {
        this.eoGroup = eoGroup;
    }

    /**
     * Gets the the {@code eoGroup} property.
     * @return the property, not null
     */
    public final Property<EOGroup> eoGroup() {
        return metaBean().eoGroup().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public EOMatList clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            EOMatList other = (EOMatList) obj;
            return (getId() == other.getId()) &&
                    JodaBeanUtils.equal(getMatNumber(), other.getMatNumber()) &&
                    JodaBeanUtils.equal(getMatName(), other.getMatName()) &&
                    JodaBeanUtils.equal(getMatPrice(), other.getMatPrice()) &&
                    JodaBeanUtils.equal(getMatPriceUnit(), other.getMatPriceUnit()) &&
                    JodaBeanUtils.equal(getMatMemo(), other.getMatMemo()) &&
                    JodaBeanUtils.equal(getEoGroup(), other.getEoGroup()) &&
                    super.equals(obj);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = hash * 31 + JodaBeanUtils.hashCode(getId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getMatNumber());
        hash = hash * 31 + JodaBeanUtils.hashCode(getMatName());
        hash = hash * 31 + JodaBeanUtils.hashCode(getMatPrice());
        hash = hash * 31 + JodaBeanUtils.hashCode(getMatPriceUnit());
        hash = hash * 31 + JodaBeanUtils.hashCode(getMatMemo());
        hash = hash * 31 + JodaBeanUtils.hashCode(getEoGroup());
        return hash ^ super.hashCode();
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(256);
        buf.append("EOMatList{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    @Override
    protected void toString(StringBuilder buf) {
        super.toString(buf);
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("matNumber").append('=').append(JodaBeanUtils.toString(getMatNumber())).append(',').append(' ');
        buf.append("matName").append('=').append(JodaBeanUtils.toString(getMatName())).append(',').append(' ');
        buf.append("matPrice").append('=').append(JodaBeanUtils.toString(getMatPrice())).append(',').append(' ');
        buf.append("matPriceUnit").append('=').append(JodaBeanUtils.toString(getMatPriceUnit())).append(',').append(' ');
        buf.append("matMemo").append('=').append(JodaBeanUtils.toString(getMatMemo())).append(',').append(' ');
        buf.append("eoGroup").append('=').append(JodaBeanUtils.toString(getEoGroup())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code EOMatList}.
     */
    public static class Meta extends AedmsEntity.Meta {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<Long> id = DirectMetaProperty.ofReadWrite(
                this, "id", EOMatList.class, Long.TYPE);
        /**
         * The meta-property for the {@code matNumber} property.
         */
        private final MetaProperty<String> matNumber = DirectMetaProperty.ofReadWrite(
                this, "matNumber", EOMatList.class, String.class);
        /**
         * The meta-property for the {@code matName} property.
         */
        private final MetaProperty<String> matName = DirectMetaProperty.ofReadWrite(
                this, "matName", EOMatList.class, String.class);
        /**
         * The meta-property for the {@code matPrice} property.
         */
        private final MetaProperty<Double> matPrice = DirectMetaProperty.ofReadWrite(
                this, "matPrice", EOMatList.class, Double.TYPE);
        /**
         * The meta-property for the {@code matPriceUnit} property.
         */
        private final MetaProperty<String> matPriceUnit = DirectMetaProperty.ofReadWrite(
                this, "matPriceUnit", EOMatList.class, String.class);
        /**
         * The meta-property for the {@code matMemo} property.
         */
        private final MetaProperty<String> matMemo = DirectMetaProperty.ofReadWrite(
                this, "matMemo", EOMatList.class, String.class);
        /**
         * The meta-property for the {@code eoGroup} property.
         */
        private final MetaProperty<EOGroup> eoGroup = DirectMetaProperty.ofReadWrite(
                this, "eoGroup", EOMatList.class, EOGroup.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, (DirectMetaPropertyMap) super.metaPropertyMap(),
                "id",
                "matNumber",
                "matName",
                "matPrice",
                "matPriceUnit",
                "matMemo",
                "eoGroup");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case 25552073:  // matNumber
                    return matNumber;
                case 840229899:  // matName
                    return matName;
                case 279672777:  // matPrice
                    return matPrice;
                case 1532016877:  // matPriceUnit
                    return matPriceUnit;
                case 840203962:  // matMemo
                    return matMemo;
                case -1604496395:  // eoGroup
                    return eoGroup;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends EOMatList> builder() {
            return new DirectBeanBuilder<EOMatList>(new EOMatList());
        }

        @Override
        public Class<? extends EOMatList> beanType() {
            return EOMatList.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> id() {
            return id;
        }

        /**
         * The meta-property for the {@code matNumber} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> matNumber() {
            return matNumber;
        }

        /**
         * The meta-property for the {@code matName} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> matName() {
            return matName;
        }

        /**
         * The meta-property for the {@code matPrice} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Double> matPrice() {
            return matPrice;
        }

        /**
         * The meta-property for the {@code matPriceUnit} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> matPriceUnit() {
            return matPriceUnit;
        }

        /**
         * The meta-property for the {@code matMemo} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> matMemo() {
            return matMemo;
        }

        /**
         * The meta-property for the {@code eoGroup} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<EOGroup> eoGroup() {
            return eoGroup;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((EOMatList) bean).getId();
                case 25552073:  // matNumber
                    return ((EOMatList) bean).getMatNumber();
                case 840229899:  // matName
                    return ((EOMatList) bean).getMatName();
                case 279672777:  // matPrice
                    return ((EOMatList) bean).getMatPrice();
                case 1532016877:  // matPriceUnit
                    return ((EOMatList) bean).getMatPriceUnit();
                case 840203962:  // matMemo
                    return ((EOMatList) bean).getMatMemo();
                case -1604496395:  // eoGroup
                    return ((EOMatList) bean).getEoGroup();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    ((EOMatList) bean).setId((Long) newValue);
                    return;
                case 25552073:  // matNumber
                    ((EOMatList) bean).setMatNumber((String) newValue);
                    return;
                case 840229899:  // matName
                    ((EOMatList) bean).setMatName((String) newValue);
                    return;
                case 279672777:  // matPrice
                    ((EOMatList) bean).setMatPrice((Double) newValue);
                    return;
                case 1532016877:  // matPriceUnit
                    ((EOMatList) bean).setMatPriceUnit((String) newValue);
                    return;
                case 840203962:  // matMemo
                    ((EOMatList) bean).setMatMemo((String) newValue);
                    return;
                case -1604496395:  // eoGroup
                    ((EOMatList) bean).setEoGroup((EOGroup) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}

package com.aedms.reporting.core;

import java.io.Serializable;
import java.util.Set;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.MetaBean;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import java.util.Map;
import java.util.NoSuchElementException;
import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import org.joda.beans.impl.direct.DirectBeanBuilder;

@BeanDefinition
public class ReportRequest  implements  Bean, Serializable {

    @PropertyDefinition
    private  String reportName;

    @PropertyDefinition
    private  String reportParm1;
    
    
    
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code ReportRequest}.
     * @return the meta-bean, not null
     */
    public static ReportRequest.Meta meta() {
        return ReportRequest.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(ReportRequest.Meta.INSTANCE);
    }

    /**
     * The serialization version id.
     */
    private static final long serialVersionUID = 1L;

    @Override
    public ReportRequest.Meta metaBean() {
        return ReportRequest.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the reportName.
     * @return the value of the property
     */
    public String getReportName() {
        return reportName;
    }

    /**
     * Sets the reportName.
     * @param reportName  the new value of the property
     */
    public void setReportName(String reportName) {
        this.reportName = reportName;
    }

    /**
     * Gets the the {@code reportName} property.
     * @return the property, not null
     */
    public final Property<String> reportName() {
        return metaBean().reportName().createProperty(this);
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the reportParm1.
     * @return the value of the property
     */
    public String getReportParm1() {
        return reportParm1;
    }

    /**
     * Sets the reportParm1.
     * @param reportParm1  the new value of the property
     */
    public void setReportParm1(String reportParm1) {
        this.reportParm1 = reportParm1;
    }

    /**
     * Gets the the {@code reportParm1} property.
     * @return the property, not null
     */
    public final Property<String> reportParm1() {
        return metaBean().reportParm1().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public ReportRequest clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            ReportRequest other = (ReportRequest) obj;
            return JodaBeanUtils.equal(getReportName(), other.getReportName()) &&
                    JodaBeanUtils.equal(getReportParm1(), other.getReportParm1());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getReportName());
        hash = hash * 31 + JodaBeanUtils.hashCode(getReportParm1());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("ReportRequest{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("reportName").append('=').append(JodaBeanUtils.toString(getReportName())).append(',').append(' ');
        buf.append("reportParm1").append('=').append(JodaBeanUtils.toString(getReportParm1())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code ReportRequest}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code reportName} property.
         */
        private final MetaProperty<String> reportName = DirectMetaProperty.ofReadWrite(
                this, "reportName", ReportRequest.class, String.class);
        /**
         * The meta-property for the {@code reportParm1} property.
         */
        private final MetaProperty<String> reportParm1 = DirectMetaProperty.ofReadWrite(
                this, "reportParm1", ReportRequest.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "reportName",
                "reportParm1");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 1931184607:  // reportName
                    return reportName;
                case -260967183:  // reportParm1
                    return reportParm1;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends ReportRequest> builder() {
            return new DirectBeanBuilder<ReportRequest>(new ReportRequest());
        }

        @Override
        public Class<? extends ReportRequest> beanType() {
            return ReportRequest.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code reportName} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> reportName() {
            return reportName;
        }

        /**
         * The meta-property for the {@code reportParm1} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> reportParm1() {
            return reportParm1;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 1931184607:  // reportName
                    return ((ReportRequest) bean).getReportName();
                case -260967183:  // reportParm1
                    return ((ReportRequest) bean).getReportParm1();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 1931184607:  // reportName
                    ((ReportRequest) bean).setReportName((String) newValue);
                    return;
                case -260967183:  // reportParm1
                    ((ReportRequest) bean).setReportParm1((String) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
